{
  "name": "Twig",
  "tagline": "Minimal bunyan-style logging for Kotlin and the JVM",
  "body": "Twig\r\n========================================\r\n\r\nOpinionated minimal logging inspired by and compatible with [node-bunyan](https://github.com/trentm/node-bunyan)\r\n\r\n----------------------------------------\r\n\r\n##  Features\r\n\r\n - JSON formatted, [bunyan](https://github.com/trentm/node-bunyan)-conformant log entries\r\n - asynchronous logging, powered by [Kovenant](http://kovenant.komponents.nl/) and [Disruptor](https://lmax-exchange.github.io/disruptor/)\r\n - console only by default\r\n - easily extendable and customisable via simple Appender interface\r\n - startup configuration via optional environment variables\r\n\r\n\r\n### Basic\r\n\r\nHaving a TestObject\r\n```kotlin\r\nobject TestObject {\r\n    val logger: Logger = Logger(this)\r\n\r\n    fun dummyFunction() {\r\n        logger.info(\"dummy\")\r\n    }\r\n}\r\n```\r\nand calling its ```dummyFunction``` will result in a log entry similar to\r\n```json\r\n{\"hostname\":\"vyo-pc\",\"pid\":6484,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T18:55:35.092Z\",\"level\":30,\"name\":\"io.github.vyo.twig.TestObject@12aba81\",\"msg\":\"dummy\",\"v\":0}\r\n```\r\n\r\n### Custom Fields\r\n\r\nYou may pass in an arbitrary number of ```Pair<String, Any>``` to create additional custom log entry fields\r\n\r\n```\r\nlogger.info(\"dummy\", Pair(\"my custom field\", \"my custom content\"), Pair(\"my logger\", logger))\r\n```\r\n\r\n```\r\n{\"hostname\":\"vyo-pc\",\"pid\":6156,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:09:58.507Z\",\"level\":30,\"name\":\"io.github.vyo.twig.TestObject@16e898f\",\"msg\":\"dummy\",\"my custom field\":\"my custom content\",\"my logger\":\"io.github.vyo.twig.logger.Logger@1a97992\",\"v\":0}\r\n```\r\n\r\n### Auto-expanded Throwables\r\n\r\nYou may pass throwables, i.e. exceptions and errors, and they will be automatically expanded to both\r\na short message and an accompanying stacktrace.\r\n\r\nStacktraces will only be logged out at DEBUG level (configurable) or below. They will be put into a custom field\r\ncalled '*stacktrace*' in the form of an array. \r\n\r\n```\r\nval logger = Logger(\"twig\")\r\n\r\ntry {\r\n    Integer.parseInt(\"not an int\")\r\n} catch (e: Exception) {\r\n    logger.error(e)\r\n    logger.debug(e)\r\n}\r\n```\r\nwill lead to\r\n```\r\n{\"hostname\":\"vyo-pc\"\",\"pid\":6580,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:38:45.037Z\",\"level\":50,\"name\":\"twig\",\"msg\":\"java.lang.NumberFormatException: For input string: \\\"not an int\\\"\",\"v\":0}\r\n{\"hostname\":\"vyo-pc\"\",\"pid\":6580,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:38:45.037Z\",\"level\":20,\"name\":\"twig\",\"msg\":\"java.lang.NumberFormatException: For input string: \\\"not an int\\\"\",\"stacktrace\":[\"java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\",\"java.lang.Integer.parseInt(Integer.java:580)\",\"java.lang.Integer.parseInt(Integer.java:615)\"],\"v\":0}\r\n```\r\n\r\n### Bunyan CLI\r\n\r\nPiped into the bunyan cli the preceding log entry will be pretty-printed like this\r\n\r\n```\r\n[2015-11-30T19:09:58.507Z]  INFO: io.github.vyo.twig.TestObject@16e898f/6156 on vyo-pc: dummy (thread=Thread[main,5,], my custom field=\"my custom content\", my logger=io.github.vyo.twig.logger.Logger@1a97992)\r\n```\r\n\r\n### Configuration\r\n\r\n__*Note*__: You may configure global options by referencing either ```Logger.*``` or ```Logger.global.*```.\r\n\r\nThe configuration is logged on startup; by default \r\n - the global log level will be INFO, \r\n - the worker amount will be set to the system's available processors,\r\n - the log queue size will be set to 1024,\r\n - throwables will be auto-expanded at DEBUG level or below,\r\n - and auto-expanded throwables will come with a stacktrace of 50 lines at most.\r\n\r\n```\r\n{\"hostname\":\"vyo-pc\",\"pid\":1144,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:36:28.220Z\",\"level\":30,\"name\":\"twig\",\"msg\":\"logging worker count: 4\",\"v\":0}\r\n{\"hostname\":\"vyo-pc\",\"pid\":1144,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:36:28.220Z\",\"level\":30,\"name\":\"twig\",\"msg\":\"logging work queue size: 1024\",\"v\":0}\r\n{\"hostname\":\"vyo-pc\",\"pid\":1144,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:36:28.220Z\",\"level\":30,\"name\":\"twig\",\"msg\":\"global log level: INFO\",\"v\":0}\r\n{\"hostname\":\"vyo-pc\"\",\"pid\":6580,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:38:45.037Z\",\"level\":30,\"name\":\"twig\",\"msg\":\"throwable expansion level: DEBUG\",\"v\":0}\r\n{\"hostname\":\"vyo-pc\"\",\"pid\":6580,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:38:45.037Z\",\"level\":30,\"name\":\"twig\",\"msg\":\"throwable expansion depth: 50\",\"v\":0}\r\n```\r\n\r\nSetting up the following environment variables in advance\r\n```sh\r\nTWIG_LEVEL=TRACE\r\nTWIG_QUEUE=64\r\nTWIG_WORKERS=1\r\nTWIG_EXPANSION_LEVEL=TRACE\r\nTWIG_EXPANSION_DEPTH=100\r\n```\r\n\r\n```\r\n{\"hostname\":\"vyo-pc\"\",\"pid\":6580,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:38:45.037Z\",\"level\":30,\"name\":\"twig\",\"msg\":\"global log level TRACE\",\"v\":0}\r\n{\"hostname\":\"vyo-pc\"\",\"pid\":6580,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:38:45.037Z\",\"level\":30,\"name\":\"twig\",\"msg\":\"logging work queue size: 64\",\"v\":0}\r\n{\"hostname\":\"vyo-pc\"\",\"pid\":6580,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:38:45.037Z\",\"level\":30,\"name\":\"twig\",\"msg\":\"logging worker count: 1\",\"v\":0}\r\n{\"hostname\":\"vyo-pc\"\",\"pid\":6580,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:38:45.037Z\",\"level\":30,\"name\":\"twig\",\"msg\":\"throwable expansion level: TRACE\",\"v\":0}\r\n{\"hostname\":\"vyo-pc\"\",\"pid\":6580,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:38:45.037Z\",\"level\":30,\"name\":\"twig\",\"msg\":\"throwable expansion depth: 100\",\"v\":0}\r\n```\r\n\r\nRe-assigning the global log level or appender will also be logged\r\n```\r\nLogger.global.appender = ConsoleAppender()\r\nLogger.global.level = Level.WARN\r\n```\r\n\r\n```\r\n{\"hostname\":\"vyo-pc\"\",\"pid\":6364,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:40:36.876Z\",\"level\":30,\"name\":\"twig\",\"msg\":\"global appender io.github.vyo.twig.appender.ConsoleAppender@1ae6ba4\",\"v\":0}\r\n{\"hostname\":\"vyo-pc\"\",\"pid\":6364,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:40:36.876Z\",\"level\":30,\"name\":\"twig\",\"msg\":\"global log level WARN\",\"v\":0}\r\n```\r\n\r\nYou may also specify your own serialiser function if the built in JSON-serialiser does not fit your needs.\r\n\r\n####Default (built in):\r\n```\r\nLogger.global.serialiser = Logger.global.simpleSerialiser\r\n```\r\n####Jodd:\r\n```\r\nval jodd = JsonSerializer()\r\nLogger.global.serialiser = { any: Any -> jodd.serialize(any) }\r\n```\r\n####Jackson:\r\n```\r\nval jackson = ObjectMapper()\r\nLogger.global.serialiser = { any: Any -> jackson.writeValueAsString(any) }\r\n```\r\n####Custom function:\r\n```\r\nfun customToJson( any: Any) : String {\r\n    return any.toString()\r\n}\r\nLogger.global.serialiser = { any: Any -> customToJson(any) }\r\n\r\n// or:\r\n\r\nval lambdaJson = { any: Any -> any.toString() }\r\nLogger.global.serialiser = { any: Any -> lambdaJson(any) }\r\n\r\n// or:\r\nLogger.global.serialiser = { any: Any -> any.toString() }\r\n```\r\n__*Note*__: You should ensure that your custom function produces valid JSON.\r\nYou may also want to have arrays and collections be automatically expanded,\r\nespecially when making use of **Twig**'s auto-expanded throwables.\r\n\r\n__*Note*__: Google's **GSON** seems to be unable to handle cyclic references, making it unsuitable for **Twig** for the time being.\r\n\r\n\r\n### Per-logger settings:\r\n\r\nLog level, appender and serialiser can be set globally, as well as individually for each logger:\r\n```\r\nval loggerOne = Logger(\"one\")\r\nval loggerTwo = Logger(\"two\")\r\n\r\nloggerOne.level = Level.WARN\r\nloggerTwo.level = Level.INFO\r\n\r\nloggerOne.appender = FileAppender()\r\nloggerTwo.appender = ConsoleAppender()\r\n\r\nloggerOne.serialiser = Logger.simpleSerialiser\r\nloggerTwo.serialiser = { any: Any -> any.toString() }\r\n\r\n```\r\n\r\n### Exception Behaviour\r\n\r\nIf an exception occurs during the actual logging process, e.g. because the underlying Appender fails, we try to log a diagnostic entry to STDERR\r\n```\r\nlogger.fatal(\"exceptional\")\r\n```\r\n```\r\n{\"hostname\":\"vyo-pc\",\"pid\":3092,\"thread\":\"Thread[main,5,]\",\"time\":\"2015-11-30T19:47:15.128Z\",\"level\":60\"name\":\"io.github.vyo.twig.logger.Logger@50ea2a\",\"msg\":\"logging failed: null\",\"original level\":30,\"original name\":\"io.github.vyo.twig.TestObject@970b10\",\"original message\":\"exceptional\",\"v\":0\r\n```\r\n\r\n##  Notes\r\n\r\nThis project adheres to the [semantic versioning](http://semver.org/) and [change log](http://keepachangelog.com/) guidelines.\r\n\r\n##  Author\r\n\r\nManuel Weidmann (@vyo)\r\n\r\n##  License\r\n\r\nISC License",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}